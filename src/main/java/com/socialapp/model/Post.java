package com.socialapp.model;

import lombok.Getter;
import lombok.Setter;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;
import java.time.LocalDateTime;
import java.util.List;

/**
 * Represents a Post entity, mapping to the "posts" collection in MongoDB.
 * <p>
 * This class defines the data structure for a post, its content, author,
 * likes, and comments.
 */
@Document(collection = "posts")
@Getter
@Setter
public class Post {

    /**
     * The unique identifier for the post document, automatically generated by MongoDB.
     */
    @Id
    private String id;

    /**
     * The title of the post, contains a one-liner headline of the post.
     */
    private String title;

    /**
     * The content of the post, describes in-depth what the post is about.
     */
    private String content;

    /**
     * A Base64 encoded string representation of the posted image.
     * It allows us to store small images directly within the document.
     */
    private String photo;

    /**
     * A reference to the user who posted.
     */
    private String authorId;

    /**
     * A timestamp indicating when the post was created.
     * Defaults to the current time upon object creation.
     */
    private LocalDateTime createdAt =  LocalDateTime.now();

    /**
     * A list of user IDs representing the users who liked the post.
     */
    private List<String> likes;

    /** A list of comments made on this post.
     * <p>
     * This list is to be embedded directly within the Post document in
     * MongoDB, representing a one-to-many relationship.
     */
    private List<Comment> comments;

    /**
     * Default no-argument constructor.
     * Required by persistence frameworks like Spring Data for object instantiation.
     */
    public Post(){}

    /**
     * Represents a single, nested comment on a post.
     * <p>
     * As a static nested class, it's a self-contained data structure used to model
     * comments that are embedded within the parent {@code Post} document.
     */
    @Getter
    @Setter
    public static class Comment{

        /**
         * A unique identifier for this specific comment.
         */
        private String id;

        /**
         * The ID of the user who posted this comment.
         * This links the comment back to a {@code User} entity.
         */
        private String authorId;

        /**
         * The text content of the comment.
         */
        private String text;

        /**
         * The timestamp indicating when the comment was created.
         * Defaults to the current time upon object creation.
         */
        private LocalDateTime createdAt = LocalDateTime.now();
    }
}
