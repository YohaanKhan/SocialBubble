package com.socialapp.model;

import lombok.Getter;
import lombok.Setter;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.index.Indexed;
import org.springframework.data.mongodb.core.mapping.Document;
import java.time.LocalDateTime;
import java.util.List;

/**
 * Represents a User entity, mapping to the "users" collection in MongoDB.
 * <p>
 * This class defines the data structure for a user, including authentication, credentials,
 * profile information, and social connections.
 */
@Document(collection = "users")
@Getter
@Setter
public class User {

    /**
     * The unique identifier for the user document, automatically generated by MongoDB.
     */
    @Id
    private String id;

    /**
     * The user's email address. It is indexed and must be unique across all users.
     * Used for login and notifications.
     */
    @Indexed(unique = true)
    private String email;

    /**
     * The user's public username. It is indexed and must be unique.
     * Used for mentions, profile URLs, and finding other users.
     */
    @Indexed(unique = true)
    private String username;

    /**
     * The user's hashed password. This field should never store a plain-text password.
     * It is intended to be encoded using a strong hashing algorithm like BCrypt.
     */
    private String password;

    /**
     * The user's public display name (e.g., "Gojo"). Can be non-unique.
     */
    private String name;

    /**
     * The user's legally recognized full name (e.g., "Gojo Satoru").
     */
    private String fullName;

    /**
     * A short, user-written biography or profile description.
     */
    private String bio;

    /**
     * A Base64 encoded string representation of the user's profile picture.
     * Allows for storing small images directly within the document.
     */
    private String profilePhoto;

    /**
     * The timestamp indicating when the user account was created.
     * Defaults to the current time upon object creation.
     */
    private LocalDateTime createdAt = LocalDateTime.now();

    /**
     * A list of user IDs representing the user's friends or connections,
     * enabling the creation of a social graph.
     */
    private List<String> friends;

    /**
     * Default no-argument constructor.
     * Required by persistence frameworks like Spring Data for object instantiation.
     */
    public User() {}
}
